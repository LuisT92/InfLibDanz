---
// Carrusel de im√°genes
interface Props {
  images: string[];
}

const { images } = Astro.props;
---

<div class="carousel-container">
  <div class="carousel">
    <div class="carousel-track" id="carouselTrack">
      {images.map((image, index) => (
        <div class="carousel-slide">
          <img src={image} alt={`Slide ${index + 1}`} />
        </div>
      ))}
    </div>
    
    <button class="carousel-button prev" id="prevBtn" aria-label="Previous slide">
      &#8249;
    </button>
    <button class="carousel-button next" id="nextBtn" aria-label="Next slide">
      &#8250;
    </button>
    
    <div class="carousel-indicators" id="indicators">
      {images.map((_, index) => (
        <button 
          class={`indicator ${index === 0 ? 'active' : ''}`} 
          data-index={index}
          aria-label={`Go to slide ${index + 1}`}
        ></button>
      ))}
    </div>
  </div>
</div>

<style>
  .carousel-container {
    width: 100%;
    max-width: 100%;
    margin: 0 auto;
    position: relative;
  }

  .carousel {
    position: relative;
    width: 100%;
    height: 500px;
    overflow: hidden;
    border-radius: 0;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
  }

  .carousel-track {
    display: flex;
    transition: transform 0.5s ease-in-out;
    height: 100%;
  }

  .carousel-slide {
    min-width: 100%;
    height: 100%;
    position: relative;
  }

  .carousel-slide img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .carousel-button {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background-color: rgba(0, 0, 0, 0.5);
    color: white;
    border: none;
    padding: 1rem 1.5rem;
    font-size: 2rem;
    cursor: pointer;
    transition: background-color 0.3s;
    z-index: 10;
  }

  .carousel-button:hover {
    background-color: rgba(0, 0, 0, 0.8);
  }

  .carousel-button.prev {
    left: 1rem;
  }

  .carousel-button.next {
    right: 1rem;
  }

  .carousel-indicators {
    position: absolute;
    bottom: 1rem;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: 0.5rem;
    z-index: 10;
  }

  .indicator {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    border: 2px solid white;
    background-color: transparent;
    cursor: pointer;
    transition: background-color 0.3s;
    padding: 0;
  }

  .indicator.active {
    background-color: white;
  }

  @media (max-width: 768px) {
    .carousel {
      height: 300px;
    }

    .carousel-button {
      padding: 0.5rem 1rem;
      font-size: 1.5rem;
    }

    .carousel-button.prev {
      left: 0.5rem;
    }

    .carousel-button.next {
      right: 0.5rem;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const track = document.getElementById('carouselTrack');
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    const indicators = document.getElementById('indicators');
    
    if (!track || !prevBtn || !nextBtn || !indicators) return;

    const slides = track.querySelectorAll('.carousel-slide');
    const indicatorButtons = indicators.querySelectorAll('.indicator');
    let currentIndex = 0;
    let autoplayInterval: number;

    const updateCarousel = (index: number) => {
      currentIndex = index;
      track.style.transform = `translateX(-${currentIndex * 100}%)`;
      
      indicatorButtons.forEach((btn, i) => {
        btn.classList.toggle('active', i === currentIndex);
      });
    };

    const nextSlide = () => {
      const nextIndex = (currentIndex + 1) % slides.length;
      updateCarousel(nextIndex);
    };

    const prevSlide = () => {
      const prevIndex = (currentIndex - 1 + slides.length) % slides.length;
      updateCarousel(prevIndex);
    };

    const startAutoplay = () => {
      autoplayInterval = setInterval(nextSlide, 5000);
    };

    const stopAutoplay = () => {
      clearInterval(autoplayInterval);
    };

    prevBtn.addEventListener('click', () => {
      prevSlide();
      stopAutoplay();
      startAutoplay();
    });

    nextBtn.addEventListener('click', () => {
      nextSlide();
      stopAutoplay();
      startAutoplay();
    });

    indicatorButtons.forEach((btn, index) => {
      btn.addEventListener('click', () => {
        updateCarousel(index);
        stopAutoplay();
        startAutoplay();
      });
    });

    // Autoplay
    startAutoplay();

    // Pausar autoplay al hacer hover
    track.addEventListener('mouseenter', stopAutoplay);
    track.addEventListener('mouseleave', startAutoplay);
  });
</script>
